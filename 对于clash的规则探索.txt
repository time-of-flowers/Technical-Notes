问题起因：暂时性避免访问某个域名

具体要求：

    避免更改原有配置文件

    需要同时具有移除，替换，添加三种功能。且为了潜在需求，选取方法需要具有足够高的自由度

    暂时性生效，在不需要时恢复原配置文件

以下是三种方法的探索
配置文件预处理

在配置文件每次下载或更新时对文件进行处理，是一次性处理，无法根据要求启用或禁用某些规则。满足2，不满足1、3

具体语法

append-rules    

数组     数组合并至原配置rules数组后

prepend-rules    

数组     数组合并至原配置rules数组前

append-proxies    

数组     数组合并至原配置proxies数组后

prepend-proxies    

数组     数组合并至原配置proxies数组前

append-proxy-groups     

数组     数组合并至原配置proxy-groups数组后

prepend-proxy-groups     

数组     数组合并至原配置proxy-groups数组前

mix-proxy-providers     

对象     对象合并至原配置proxy-providers中

mix-rule-providers    

对象     对象合并至原配置rule-providers中

mix-object

对象     对象合并至原配置最外层中

例如：

parsers:
  - url: https://example.com/profile.yaml
    yaml:
      prepend-rules:
        - DOMAIN,test.com,DIRECT # rules最前面增加一个规则
      append-proxies:
        - name: test # proxies最后面增加一个服务
          type: http
          server: 123.123.123.123
          port: 456


mixin的yaml模式

mixin过程发生于内存中，不会更改原文件，满足1。mixin可以手动开关，满足3。

yaml模式为覆盖，mixin会将相同字段完全覆盖掉原有配置，该方法会让原有配置中的规则遗失，所需要的功能应该是混合而不是覆盖。不满足2.

适用字段：

proxies（代理基本信息，如名称，包含节点等）
proxy-providers（提供商，可用于动态加载服务器列表，目前没用应用实例）
proxy-groups（组别，节点分组，便于阅读）
rule-providers（提供商，用于动态加载规则，目前没有应用实例）
rules（规则匹配，用户重点使用）
tun（tun模式，现已使用GUI控制。通常不会频繁调整。）
dns
hosts

以rules为例：

mixin:#注意缩进
  rules:
    - "DOMAIN-SUFFIX,test.com,REJECT"

该mixin会覆盖原有配置文件中的rules字段，并非追加、删除、替换、重载同名或冲突的规则


mixin的javascript模式

使用javascript脚本在mixin阶段更改提交给clash core的数据，javascript脚本具有极强的自定义能力。满足1、2、3需求。
通用模板

module.exports.parse = async ({ content, name, url },{ axios, yaml, notify }) => {
    代码段
  return {...content};
};


CFW 调用的用户定义的parse方法（介于CFW闭源，以下解释有一定程度的推测）
（尚不知晓在预处理阶段调用的parse方法是否和mixin阶段、yaml官方文档中的parse函数的是否为同一个函数或函数的重载，根据官方文档三者对于输入参数具有不同的要求）

传入参数1：    配置文件元数据（该对象要求指向yaml 格式化后的 JavaScript 对象）
         包括：    content（你正在选用的配置文件，相当于this）、
                        name（配置文件的文件名，函数会试图匹配你拥有的本地配置）、
                        url（配置文件下载地址，函数会尝试读取远程配置）
           
传入参数2：    工具类对象/方法
         包括：    axios（网络请求框架https://github.com/axios/axios ）、
                        yaml（yaml 框架https://github.com/eemeli/yaml ）、
                        notify（发出系统通知方法，定义为function notify(title:string, message:string, silent:bool)，其中设置中“向系统通知栏发送相关信息”对比silent具有更高优先级）


举例：

module.exports.parse = async ({ content, name, url },  { axios, yaml, notify }) => {
  content["proxy-groups"].push(
    {
      name: "禁止访问adobe系列域名-REJECT",
      proxies: ["REJECT"],
      type: "select"
    }
  )

  let AdobeREJECT = [
    "DOMAIN-SUFFIX,adobe.com,禁止访问adobe系列域名-REJECT",
    "DOMAIN-SUFFIX,adobe.io,禁止访问adobe系列域名-REJECT"
  ];

  AdobeREJECT.forEach(newRule => {
    let key = newRule.split(",")[1];
    let index = content.rules.findIndex(orgRule => orgRule.includes(key));
    
    if (index !== -1) {
        content.rules[index] = newRule;
    } else {
        content.rules.unshift(newRule);
    }
  });
 
  // 发出系统通知
  let msg = content["proxy-groups"][0].name.toString() + " 中的 rules 已被 CFW 更新"
  notify("CFW: rules 已被 Mixin 更新", msg, true)

  // 出参：该对象会直接被 CFW 序列化加载并应用
  return content
}

AdobeREJECT中的规则首先试图替换content中相冲突的规则，并将未定义的规则添加到头部（因为clash core需要match进行扫尾，故不能添加于尾部）

该方法使用javascript方法自定义更改了配置文件，并且由于mixin的特性，混合只在内存中发生，不会影响到本地文件，需要规则的时候打开mixin即可，关闭时即可恢复。

使用content指定传入配置文件元数据，在切换配置文件后仍可生效


补充内容

关于CFW对于配置文件提交给clash core之前的处理：

由于远程读取配置具有不稳定性，目前普遍采用下载配置文件到本地的方法，因此以该方法为基础。另远程读取配置没有足够的实例用于探索学习

下载原始配置文件->使用预处理对配置文件进行修改->在内存中mixin->提交给clash core

配置优先级Mixin>TUN Mode>Profile（预处理）


关于tun模式：

并非所有的流量都遵循系统代理，使用tun模式代理所有的流量。对于CFW中的tum模式分为两种功能，其一是开启tun设备；其二是开启tun设备之后，对于配置文件进行dns服务器fake ip和域名正常进行mixin前设置（内存中），该设置针对tun设备。该设置可被mixin进行覆盖或修改。


对于clash使用的yaml数据语言标准中数据结构内容的访问：

正常情况下访问content中的内容可以使用content.key或content["key"]访问，由于clash core 接受的输入中具有rule-providers，proxy-groups，proxy-providers字段，变量名中“-”的存在使得此三种字段无法通过“.”点访问，只能使用["key"]字典键访问。


对于javascript中findIndex函数和箭头函数的探索：

orgRule => orgRule.includes(key)

箭头函数声明了一个匿名函数，箭头前是变量名，箭头后是代码。箭头函数形式更加简洁且高效，省略的函数的大部分要素，对于需要单一目的的时候可以极大简化代码。

findIntex函数目的为寻找索引。

array.findIndex(function(currentValue, index, arr), thisValue)

https://www.runoob.com/jsref/jsref-findindex.html的描述疑似存在中文语法错误（反正我没看懂）

findIndex() 方法-返回{【传入一个测试条件（函数）符合条件】的数组}第一个元素位置。

（传入和符合都是动词，之间怎么没有连词？）

更改描述：

findIndex() 方法的返回值为-调用该方法的数组中，【测试结果（测试为返回值为bool类型的函数）】为true的第一个元素的位置。

数组元素会顺序传入测试函数，当出现true之后，后续元素不在唤起测试函数。

数组元素结果均为false后，findIndex返回-1

空数组调用findIndex，函数是不会执行。findIndex() 并没有改变数组的原始值。


以上内容均为有限学习，如有纰漏，欢迎批评指正

by时之花，2024年11月12日
参考文献

clashforwindows官方文档（中文）

https://github.com/Z-Siqi/Clash-for-Windows_Chinese/wiki

clash中使用的yaml具体结构规则 互联网存档

https://web.archive.org/web/20230504234000/https://github.com/Dreamacro/clash/wiki/configuration

yaml官方文档

https://eemeli.org/yaml/#documents

clash知识库

https://clash.wiki/configuration/rules.html

米白云-clash高级用法

https://docs.mebi.me/docs/advanced-usage-for-clash

iBug，Clash for Windows 自定义规则整合

https://ibug.io/cn/2020/07/clash-for-windows-custom-rules/

7xWEcQ于 LINUX DO！中在《分享下clash for windows如何预设置规则(效果为:每次更新订阅后自定义的规则还在)》帖子中的回复

https://linux.do/t/topic/21236/6

菜鸟教程

https://www.runoob.com/jsref/jsref-obj-array.html